.row {

  // Card container

  display: flex;
  flex-flow: row wrap;
}

.card, .card-with-left-image {

  // Contextual layout

  margin-top: 2rem;
  margin-bottom: 2rem;
  position: relative;
  display: block;
}

.card {

  // Layout

  $card-padding: 2rem;

  border-top: 1ex solid $light-grey;
  display: inline-flex;
  flex-flow: column nowrap;
  color: inherit;
  font: inherit;
  text-decoration: initial;
  overflow: hidden;
  border-radius: 1px;
  font-size: 16px;

  background: $light-grey;

  a, button {
    position: relative;
    z-index: 2;
  }

  a.card-cta-overlay {
    z-index: 1;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
  }

  .header {
    padding: $card-padding;
    border-bottom: 0.3ex solid #fff;
  }

  .content {
    padding: 0 $card-padding $card-padding;
    flex: 1 1 auto;
    display: flex;
    flex-flow: column nowrap;
    align-items: flex-start;

    p {
      margin-top: $card-padding;

      &:last-of-type {
        flex: 1 1 auto;
      }
    }
  }

  button, .button {
    margin: $card-padding 0 0;
  }

  h3, h4 {
    margin: $card-padding 0;

    a {
      color: inherit;
    }
  }

  h3 {
    font-size: 2em;
  }

  h4 {
    font-size: 1.7em;
  }

  p {
    width: 100%;
    font-size: 2rem;
    margin: 0;
  }

  .identifier {
    margin: 0;
    width: 100%;
    padding-bottom: $card-padding;
    border-bottom: 0.2ex solid $light-grey;
    font-size: 1em;
  }

  .supporting {
    font-size: 1em;
  }

  button, .button {
    font-size: 1.2em;
  }

  &.without-border {
    border: none;
  }

  &.wide {
    padding-left: 0.5rem;
    padding-right: 0.5rem;
  }


  // Map colours

  @each $configName, $colourConfig in $colourConfigs {

    $selectorForColour: if($configName == base, '', '.'+$configName);

    &#{$selectorForColour} {
      border-top-color: map-get($colourConfig, subtle);

      .header {
        color: map-get($colourConfig, intense);

        a:hover {
          color: map-get($colourConfig, subtle);
        }
      }

      .identifier {
        border-bottom-color: map-get($colourConfig, subtle);
      }

      .content {
        color: $dark-grey;
      }

      button, .button {
        color: #fff;
        border-color: map-get($colourConfig, intense);
        background: map-get($colourConfig, intense);

        &:hover, &:focus {
          border-color: map-get($colourConfig, subtle);
          background: map-get($colourConfig, subtle);
        }

        &.hollow {
          color: map-get($colourConfig, intense);
          background: transparent;

          &:hover, &:focus {
            color: map-get($colourConfig, subtle);
          }
        }

      }

      &.inverted-header {
        .header {
          background:map-get($colourConfig, intense);
          color: #fff;
        }
      }
    }
  }
}

@media (#{$max-width-tablet}) {
  .card {
    h3 {
      font-size: 1.7em;
    }
    h4 {
      font-size: 1.4em;
    }
  }
}

@media (#{$max-width-mobile}) {
  .card {
    h3 {
      font-size: 1.5em;
    }
    h4 {
      font-size: 1.2em;
    }
  }
}

// Special types

.card-with-left-image {
  font-size: 0;
  display: flex;
  flex-flow: row wrap;

  .image-container {
    display: inline-block;
    vertical-align: top;
    width: 100%;
    position: relative;
    overflow: hidden;

    img {
      display: block;
      min-width: 100%;
      min-height: 100%;
    }
  }

  .card {
    border: none;
    margin: 0;
    display: inline-block;
    display: inline-flex;
    vertical-align: top;
    float: none;
    padding-top: 1rem;
  }
}

@media (#{$min-width-tablet}) {
  div.card-with-left-image {
    .image-container {
      width: grid-offset-length(6);
    }
  }
}

// ???

.dark-card {
  background: black;
  color: white;
}

.application-card {
  align-items: center;
}

.application-label {
  text-align: center;
  margin-top: 1.4em;
}